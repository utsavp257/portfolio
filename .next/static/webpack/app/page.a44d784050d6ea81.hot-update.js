"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./data/projects.ts":
/*!**************************!*\
  !*** ./data/projects.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   projects: function() { return /* binding */ projects; }\n/* harmony export */ });\nconst projects = [\n    {\n        id: \"ner-low-resource\",\n        title: \"NER in Low-Resource Languages\",\n        short: \"Cross-lingual projection + IndicBERT fine-tuning for NER datasets.\",\n        description: \"Built an end-to-end pipeline to generate silver-standard NER datasets by projecting English NER tags onto Indic languages using Samanantar and Wikipedia data. Used tools like spaCy, LaBSE, SimAlign, and Awesome-Align for alignment, and fine-tuned IndicBERT for NER. Focused on alignment quality, filtering, and reproducible training\",\n        tags: [\n            \"NLP\",\n            \"NER\",\n            \"IndicBERT\",\n            \"Tag Projection\"\n        ],\n        href: \"https://github.com/utsavp257/ner-low-resource\"\n    },\n    {\n        id: \"gallery-app\",\n        title: \"Gallery App\",\n        short: \"Next.js app with authentication and image uploads.\",\n        description: \"Developed a feature-rich gallery app using TypeScript, JavaScript, and Tailwind CSS, where users can upload and view images after logging in (using parallel routes). Implemented authentication with Clerk, deployed on Vercel, and integrated Sentry for error management, PostHog for analytics, and Upstash for rate limiting. Use of NextJS enabled smooth UI experience for users\",\n        tags: [\n            \"Next.js\",\n            \"TypeScript\",\n            \"Clerk\",\n            \"Vercel\"\n        ],\n        href: \"https://github.com/utsavp257/gallery-app\"\n    },\n    {\n        id: \"conv-sum\",\n        title: \"Conversation Summarizer\",\n        short: \"Dialogue summarization fine-tuned with QLoRA on Llama2.\",\n        description: \"Summarizer trained on SAMSum and fine-tuned with QLoRA for resource efficiency; outputs concise conversation summaries.\",\n        tags: [\n            \"LLMs\",\n            \"Llama2\",\n            \"QLoRA\"\n        ],\n        href: \"https://github.com/utsavp257/conversation-summarizer\"\n    },\n    {\n        id: \"qa-system\",\n        title: \"Question-Answering (QA) systems for comparative questions\",\n        short: \"Studying input variationsâ€™ impact on BERT training performance.\",\n        description: \"The aim of the project was to comprehensively study and/or measure the effect of feeding inputs of varying quantitative inputs in language models like BERT and test various patterns of training to check the variation in performance of the same.\",\n        tags: [\n            \"LLMs\",\n            \"Llama2\",\n            \"QLoRA\"\n        ],\n        href: \"https://github.com/utsavp257/conversation-summarizer\"\n    },\n    {\n        id: \"conv-sum\",\n        title: \"Conversation Summarizer\",\n        short: \"Dialogue summarization fine-tuned with QLoRA on Llama2.\",\n        description: \"Summarizer trained on SAMSum and fine-tuned with QLoRA for resource efficiency; outputs concise conversation summaries.\",\n        tags: [\n            \"LLMs\",\n            \"Llama2\",\n            \"QLoRA\"\n        ],\n        href: \"https://github.com/utsavp257/conversation-summarizer\"\n    },\n    {\n        id: \"conv-sum\",\n        title: \"Conversation Summarizer\",\n        short: \"Dialogue summarization fine-tuned with QLoRA on Llama2.\",\n        description: \"Summarizer trained on SAMSum and fine-tuned with QLoRA for resource efficiency; outputs concise conversation summaries.\",\n        tags: [\n            \"LLMs\",\n            \"Llama2\",\n            \"QLoRA\"\n        ],\n        href: \"https://github.com/utsavp257/conversation-summarizer\"\n    },\n    {\n        id: \"conv-sum\",\n        title: \"Conversation Summarizer\",\n        short: \"Dialogue summarization fine-tuned with QLoRA on Llama2.\",\n        description: \"Summarizer trained on SAMSum and fine-tuned with QLoRA for resource efficiency; outputs concise conversation summaries.\",\n        tags: [\n            \"LLMs\",\n            \"Llama2\",\n            \"QLoRA\"\n        ],\n        href: \"https://github.com/utsavp257/conversation-summarizer\"\n    }\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2RhdGEvcHJvamVjdHMudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFdBQVc7SUFDcEI7UUFDQUMsSUFBSTtRQUNKQyxPQUFPO1FBQ1BDLE9BQU87UUFDUEMsYUFBYTtRQUNiQyxNQUFNO1lBQUM7WUFBTztZQUFPO1lBQWE7U0FBaUI7UUFDbkRDLE1BQU07SUFDTjtJQUNBO1FBQ0FMLElBQUk7UUFDSkMsT0FBTztRQUNQQyxPQUFPO1FBQ1BDLGFBQWE7UUFDYkMsTUFBTTtZQUFDO1lBQVc7WUFBYztZQUFTO1NBQVM7UUFDbERDLE1BQU07SUFDTjtJQUNBO1FBQ0FMLElBQUk7UUFDSkMsT0FBTztRQUNQQyxPQUFPO1FBQ1BDLGFBQWE7UUFDYkMsTUFBTTtZQUFDO1lBQVE7WUFBVTtTQUFRO1FBQ2pDQyxNQUFNO0lBQ047SUFDQTtRQUNBTCxJQUFJO1FBQ0pDLE9BQU87UUFDUEMsT0FBTztRQUNQQyxhQUFhO1FBQ2JDLE1BQU07WUFBQztZQUFRO1lBQVU7U0FBUTtRQUNqQ0MsTUFBTTtJQUNOO0lBQ0k7UUFDSUwsSUFBSTtRQUNKQyxPQUFPO1FBQ1BDLE9BQU87UUFDUEMsYUFBYTtRQUNiQyxNQUFNO1lBQUM7WUFBUTtZQUFVO1NBQVE7UUFDakNDLE1BQU07SUFDTjtJQUNBO1FBQ0lMLElBQUk7UUFDSkMsT0FBTztRQUNQQyxPQUFPO1FBQ1BDLGFBQWE7UUFDYkMsTUFBTTtZQUFDO1lBQVE7WUFBVTtTQUFRO1FBQ2pDQyxNQUFNO0lBQ047SUFDQTtRQUNJTCxJQUFJO1FBQ0pDLE9BQU87UUFDUEMsT0FBTztRQUNQQyxhQUFhO1FBQ2JDLE1BQU07WUFBQztZQUFRO1lBQVU7U0FBUTtRQUNqQ0MsTUFBTTtJQUNOO0NBQ2YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9kYXRhL3Byb2plY3RzLnRzP2QzOTkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHByb2plY3RzID0gW1xyXG4gICAge1xyXG4gICAgaWQ6ICduZXItbG93LXJlc291cmNlJyxcclxuICAgIHRpdGxlOiAnTkVSIGluIExvdy1SZXNvdXJjZSBMYW5ndWFnZXMnLFxyXG4gICAgc2hvcnQ6ICdDcm9zcy1saW5ndWFsIHByb2plY3Rpb24gKyBJbmRpY0JFUlQgZmluZS10dW5pbmcgZm9yIE5FUiBkYXRhc2V0cy4nLFxyXG4gICAgZGVzY3JpcHRpb246ICdCdWlsdCBhbiBlbmQtdG8tZW5kIHBpcGVsaW5lIHRvIGdlbmVyYXRlIHNpbHZlci1zdGFuZGFyZCBORVIgZGF0YXNldHMgYnkgcHJvamVjdGluZyBFbmdsaXNoIE5FUiB0YWdzIG9udG8gSW5kaWMgbGFuZ3VhZ2VzIHVzaW5nIFNhbWFuYW50YXIgYW5kIFdpa2lwZWRpYSBkYXRhLiBVc2VkIHRvb2xzIGxpa2Ugc3BhQ3ksIExhQlNFLCBTaW1BbGlnbiwgYW5kIEF3ZXNvbWUtQWxpZ24gZm9yIGFsaWdubWVudCwgYW5kIGZpbmUtdHVuZWQgSW5kaWNCRVJUIGZvciBORVIuIEZvY3VzZWQgb24gYWxpZ25tZW50IHF1YWxpdHksIGZpbHRlcmluZywgYW5kIHJlcHJvZHVjaWJsZSB0cmFpbmluZycsXHJcbiAgICB0YWdzOiBbJ05MUCcsICdORVInLCAnSW5kaWNCRVJUJywgJ1RhZyBQcm9qZWN0aW9uJ10sXHJcbiAgICBocmVmOiAnaHR0cHM6Ly9naXRodWIuY29tL3V0c2F2cDI1Ny9uZXItbG93LXJlc291cmNlJ1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgIGlkOiAnZ2FsbGVyeS1hcHAnLFxyXG4gICAgdGl0bGU6ICdHYWxsZXJ5IEFwcCcsXHJcbiAgICBzaG9ydDogJ05leHQuanMgYXBwIHdpdGggYXV0aGVudGljYXRpb24gYW5kIGltYWdlIHVwbG9hZHMuJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnRGV2ZWxvcGVkIGEgZmVhdHVyZS1yaWNoIGdhbGxlcnkgYXBwIHVzaW5nIFR5cGVTY3JpcHQsIEphdmFTY3JpcHQsIGFuZCBUYWlsd2luZCBDU1MsIHdoZXJlIHVzZXJzIGNhbiB1cGxvYWQgYW5kIHZpZXcgaW1hZ2VzIGFmdGVyIGxvZ2dpbmcgaW4gKHVzaW5nIHBhcmFsbGVsIHJvdXRlcykuIEltcGxlbWVudGVkIGF1dGhlbnRpY2F0aW9uIHdpdGggQ2xlcmssIGRlcGxveWVkIG9uIFZlcmNlbCwgYW5kIGludGVncmF0ZWQgU2VudHJ5IGZvciBlcnJvciBtYW5hZ2VtZW50LCBQb3N0SG9nIGZvciBhbmFseXRpY3MsIGFuZCBVcHN0YXNoIGZvciByYXRlIGxpbWl0aW5nLiBVc2Ugb2YgTmV4dEpTIGVuYWJsZWQgc21vb3RoIFVJIGV4cGVyaWVuY2UgZm9yIHVzZXJzJyxcclxuICAgIHRhZ3M6IFsnTmV4dC5qcycsICdUeXBlU2NyaXB0JywgJ0NsZXJrJywgJ1ZlcmNlbCddLFxyXG4gICAgaHJlZjogJ2h0dHBzOi8vZ2l0aHViLmNvbS91dHNhdnAyNTcvZ2FsbGVyeS1hcHAnXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgaWQ6ICdjb252LXN1bScsXHJcbiAgICB0aXRsZTogJ0NvbnZlcnNhdGlvbiBTdW1tYXJpemVyJyxcclxuICAgIHNob3J0OiAnRGlhbG9ndWUgc3VtbWFyaXphdGlvbiBmaW5lLXR1bmVkIHdpdGggUUxvUkEgb24gTGxhbWEyLicsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1N1bW1hcml6ZXIgdHJhaW5lZCBvbiBTQU1TdW0gYW5kIGZpbmUtdHVuZWQgd2l0aCBRTG9SQSBmb3IgcmVzb3VyY2UgZWZmaWNpZW5jeTsgb3V0cHV0cyBjb25jaXNlIGNvbnZlcnNhdGlvbiBzdW1tYXJpZXMuJyxcclxuICAgIHRhZ3M6IFsnTExNcycsICdMbGFtYTInLCAnUUxvUkEnXSxcclxuICAgIGhyZWY6ICdodHRwczovL2dpdGh1Yi5jb20vdXRzYXZwMjU3L2NvbnZlcnNhdGlvbi1zdW1tYXJpemVyJ1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgIGlkOiAncWEtc3lzdGVtJyxcclxuICAgIHRpdGxlOiAnUXVlc3Rpb24tQW5zd2VyaW5nIChRQSkgc3lzdGVtcyBmb3IgY29tcGFyYXRpdmUgcXVlc3Rpb25zJyxcclxuICAgIHNob3J0OiAnU3R1ZHlpbmcgaW5wdXQgdmFyaWF0aW9uc+KAmSBpbXBhY3Qgb24gQkVSVCB0cmFpbmluZyBwZXJmb3JtYW5jZS4nLFxyXG4gICAgZGVzY3JpcHRpb246ICdUaGUgYWltIG9mIHRoZSBwcm9qZWN0IHdhcyB0byBjb21wcmVoZW5zaXZlbHkgc3R1ZHkgYW5kL29yIG1lYXN1cmUgdGhlIGVmZmVjdCBvZiBmZWVkaW5nIGlucHV0cyBvZiB2YXJ5aW5nIHF1YW50aXRhdGl2ZSBpbnB1dHMgaW4gbGFuZ3VhZ2UgbW9kZWxzIGxpa2UgQkVSVCBhbmQgdGVzdCB2YXJpb3VzIHBhdHRlcm5zIG9mIHRyYWluaW5nIHRvIGNoZWNrIHRoZSB2YXJpYXRpb24gaW4gcGVyZm9ybWFuY2Ugb2YgdGhlIHNhbWUuJyxcclxuICAgIHRhZ3M6IFsnTExNcycsICdMbGFtYTInLCAnUUxvUkEnXSxcclxuICAgIGhyZWY6ICdodHRwczovL2dpdGh1Yi5jb20vdXRzYXZwMjU3L2NvbnZlcnNhdGlvbi1zdW1tYXJpemVyJ1xyXG4gICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnY29udi1zdW0nLFxyXG4gICAgICAgICAgICB0aXRsZTogJ0NvbnZlcnNhdGlvbiBTdW1tYXJpemVyJyxcclxuICAgICAgICAgICAgc2hvcnQ6ICdEaWFsb2d1ZSBzdW1tYXJpemF0aW9uIGZpbmUtdHVuZWQgd2l0aCBRTG9SQSBvbiBMbGFtYTIuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdTdW1tYXJpemVyIHRyYWluZWQgb24gU0FNU3VtIGFuZCBmaW5lLXR1bmVkIHdpdGggUUxvUkEgZm9yIHJlc291cmNlIGVmZmljaWVuY3k7IG91dHB1dHMgY29uY2lzZSBjb252ZXJzYXRpb24gc3VtbWFyaWVzLicsXHJcbiAgICAgICAgICAgIHRhZ3M6IFsnTExNcycsICdMbGFtYTInLCAnUUxvUkEnXSxcclxuICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vZ2l0aHViLmNvbS91dHNhdnAyNTcvY29udmVyc2F0aW9uLXN1bW1hcml6ZXInXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlkOiAnY29udi1zdW0nLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdDb252ZXJzYXRpb24gU3VtbWFyaXplcicsXHJcbiAgICAgICAgICAgICAgICBzaG9ydDogJ0RpYWxvZ3VlIHN1bW1hcml6YXRpb24gZmluZS10dW5lZCB3aXRoIFFMb1JBIG9uIExsYW1hMi4nLFxyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdTdW1tYXJpemVyIHRyYWluZWQgb24gU0FNU3VtIGFuZCBmaW5lLXR1bmVkIHdpdGggUUxvUkEgZm9yIHJlc291cmNlIGVmZmljaWVuY3k7IG91dHB1dHMgY29uY2lzZSBjb252ZXJzYXRpb24gc3VtbWFyaWVzLicsXHJcbiAgICAgICAgICAgICAgICB0YWdzOiBbJ0xMTXMnLCAnTGxhbWEyJywgJ1FMb1JBJ10sXHJcbiAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9naXRodWIuY29tL3V0c2F2cDI1Ny9jb252ZXJzYXRpb24tc3VtbWFyaXplcidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdjb252LXN1bScsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdDb252ZXJzYXRpb24gU3VtbWFyaXplcicsXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvcnQ6ICdEaWFsb2d1ZSBzdW1tYXJpemF0aW9uIGZpbmUtdHVuZWQgd2l0aCBRTG9SQSBvbiBMbGFtYTIuJyxcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1N1bW1hcml6ZXIgdHJhaW5lZCBvbiBTQU1TdW0gYW5kIGZpbmUtdHVuZWQgd2l0aCBRTG9SQSBmb3IgcmVzb3VyY2UgZWZmaWNpZW5jeTsgb3V0cHV0cyBjb25jaXNlIGNvbnZlcnNhdGlvbiBzdW1tYXJpZXMuJyxcclxuICAgICAgICAgICAgICAgICAgICB0YWdzOiBbJ0xMTXMnLCAnTGxhbWEyJywgJ1FMb1JBJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vZ2l0aHViLmNvbS91dHNhdnAyNTcvY29udmVyc2F0aW9uLXN1bW1hcml6ZXInXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgIF07Il0sIm5hbWVzIjpbInByb2plY3RzIiwiaWQiLCJ0aXRsZSIsInNob3J0IiwiZGVzY3JpcHRpb24iLCJ0YWdzIiwiaHJlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/projects.ts\n"));

/***/ })

});